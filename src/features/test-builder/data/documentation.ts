
export const DOCUMENTATION: Record<string, { description: string; example?: string; link?: string }> = {
    FUNCTION: { description: "Creates a new test method. All tests in JUnit 5 must be annotated with @Test. You can assign a rubric item to this test for grading.", example: "@Test void myTest() { ... }", link: "https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" },
    TEST_CASE_FUNCTION: { description: "Defines a test method that will be executed multiple times with different sets of inputs and expected outputs, useful for parameterized tests.", example: "@ParameterizedTest @MethodSource(\"testCases\") void myParameterizedTest(String input, String expectedOutput) { ... }" },

    "Function Test": { description: "A template that creates a structured test for verifying method behavior with specific inputs and expected outputs.", example: "Tests a method like add(1, 2) expecting result 3" },
    "I/O Test": { description: "A template for testing input/output operations, comparing actual results with expected outputs.", example: "Run code with input and verify the output matches expectations" },
    "Data Type Test": { description: "A template for verifying variable types and data type assertions.", example: "Check if variables are instances of their expected classes" },
    "Regex Test": { description: "A template for testing regular expression matching against strings.", example: "Verify email format matches a regex pattern" },
    "String Matching": { description: "A template for testing string operations like starts with, ends with, and contains.", example: "Verify a string starts with 'Hello' and ends with 'World'" },
    "Array Test": { description: "A template for testing array and collection operations including size, contents, and ordering.", example: "Verify array length and exact contents" },
    "Verify Naming": { description: "A template for static analysis checks that verify the existence of classes, methods, and variables in source code.", example: "Check if a class 'MyClass' exists with method 'myMethod'" },
    FUNCTION_TEST: { description: "A specialized test block for verifying the behavior of a specific method within a class, providing a structured way to define inputs and expected outcomes.", example: "Given a method 'add' with parameters (2, 3), expect the result to be 5." },
    VARIABLE: { description: "Declares and initializes a variable for use within a test function.", example: "String name = \"AssertJ\";" },
    ASSERT_THAT: { description: "The entry point for all AssertJ assertions. You pass the object you want to test to this block.", example: "assertThat(myString)...", link: "https://assertj.github.io/doc/#assertj-core-quick-start" },
    EXCEPTION_ASSERT: { description: "Asserts that a specific piece of code throws an exception of a certain type.", example: "assertThatExceptionOfType(IOException.class).isThrownBy(() -> { ... });", link: "https://assertj.github.io/doc/#assertj-core-exception-assertions-assertThatExceptionOfType" },
    STATIC_ASSERT: { description: "Represents a static analysis check, verifying the source code itself, not its runtime behavior." },
    STRUCTURE_CHECK: { description: "Represents a check for a specific structural element within a function's source code." },
    COMMENT: { description: "Adds a comment to your test code for better readability and explanation. This block does not affect the test's execution.", example: "// This is a comment about the next test step." },
    CASE_SOURCE: { description: "Defines a source of arguments for parameterized tests, typically a method that returns a Stream of Arguments or a collection of arrays. Each inner array represents a set of inputs and expected values for one test case.", example: `static Stream<Arguments> testCases() { return Stream.of( arguments(\"input1\", \"expected1\"), arguments(\"input2\", \"expected2\") ); }` },
    TEMPLATE_FUNCTION: { description: "Represents a reusable template for a function block, allowing you to quickly add pre-defined function structures to your test suite." },

    // Static Assert Sub-types
    CLASS_EXISTS: { description: "Checks if a class with the specified name exists in the source code." },
    FUNCTION_EXISTS: { description: "Checks if a function (method) with the specified name exists in the source code." },
    VARIABLE_EXISTS: { description: "Checks if a variable with the specified name exists in the source code." },
    FUNCTION_EXISTS_IN_CLASS: { description: "Checks if a function (method) with the specified name exists within a given class." },
    VARIABLE_EXISTS_IN_CLASS: { description: "Checks if a variable with the specified name exists within a given class." },
    VARIABLE_EXISTS_IN_FUNCTION: { description: "Checks if a variable with the specified name exists within a given function (method)." },
    VARIABLE_CALLED_IN_FUNCTION: { description: "Checks if a specific variable is called or used within a given function/method." },
    VARIABLE_CALLED_IN_CLASS: { description: "Checks if a specific variable is called or used within methods of a given class." },

    // Structure Check Sub-types (refined descriptions)
    HAS_LOOP: { description: "Checks if the analyzed function/method contains any loop structure (e.g., `for`, `while`, `do-while`)." },
    HAS_CONDITIONAL: { description: "Checks if the analyzed function/method contains any conditional statement (e.g., `if`, `else if`, `else`, `switch`)." },
    HAS_VARIABLE: { description: "Checks if a variable with a specific name and/or type is declared within the function/method." },
    HAS_PARAMETER: { description: "Checks if the analyzed function/method has a parameter with a specific name and/or type." },
    HAS_RETURN: { description: "Checks if the analyzed function/method explicitly returns a value (i.e., contains a `return` statement)." },

    // Matcher (Existing, renamed HAS_LENGTH to HAS_SIZE for consistency with types.ts)
    IS_EQUAL_TO: { description: "Asserts that the actual value is equal to the expected value using `.equals()`.", example: "assertThat(name).isEqualTo(\"AssertJ\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-objects-isEqualTo" },
    IS_NOT_NULL: { description: "Asserts that the actual value is not null.", example: "assertThat(myObject).isNotNull();" },
    HAS_SIZE: { description: "Asserts that the size of a collection, array, or string is equal to the given value.", example: "assertThat(myList).hasSize(3); assertThat(\"four\").hasSize(4);" },
    IS_INSTANCE_OF: { description: "Asserts that the actual value is an instance of the given class.", example: "assertThat(myObject).isInstanceOf(String.class);", link: "https://assertj.github.io/doc/#assertj-core-is-instance-of" },
    CONTAINS: { description: "Asserts that an array or iterable contains the given value(s).", example: "assertThat(myList).contains(\"apple\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-iterables-contains" },
    CONTAINS_ONLY: { description: "Verifies that the actual group contains only the given values and nothing else in any order and ignoring duplicates (i.e. once a value is found, its duplicates are also considered found).", example: "assertThat(myList).containsOnly(\"apple\", \"banana\");" },
    CONTAINS_EXACTLY: { description: "Verifies that the actual iterable/array contains exactly the given values and nothing else in order.", example: "assertThat(myList).containsExactly(\"first\", \"second\", \"third\");" },
    CONTAINS_EXACTLY_IN_ANY_ORDER: { description: "Verifies that the actual iterable/array contains exactly the given values and nothing else in any order.", example: "assertThat(myList).containsExactlyInAnyOrder(\"apple\", \"banana\", \"cherry\");" },
    CONTAINS_SEQUENCE: { description: "Verifies that the actual group contains the given sequence in the correct order and without extra values between the sequence values.", example: "assertThat(myList).containsSequence(\"first\", \"second\");" },
    CONTAINS_SUBSEQUENCE: { description: "Verifies that the actual group contains the given subsequence in the correct order possibly with other values between them.", example: "assertThat(myList).containsSubsequence(\"apple\", \"cherry\");" },
    CONTAINS_ONLY_ONCE: { description: "Verifies that the actual iterable/array contains the given values only once.", example: "assertThat(myList).containsOnlyOnce(\"unique\");" },
    CONTAINS_ANY_OF: { description: "Verifies that the actual iterable/array contains at least one of the given values (like an or operator on the given values).", example: "assertThat(myList).containsAnyOf(\"apple\", \"orange\", \"grape\");" },
    DOES_NOT_CONTAIN: { description: "Asserts that an array or iterable does not contain the given value(s).", example: "assertThat(myList).doesNotContain(\"orange\");" },
    EXTRACTING: { description: "Extracts a property from an object, allowing you to chain assertions on that property.", example: "assertThat(person).extracting(\"name\").isEqualTo(\"John\");", link: "https://assertj.github.io/doc/#assertj-core-extracting" },
    MATCHES: { description: "Asserts that a string matches the given regular expression.", example: "assertThat(email).matches(\".+@.+\\..+\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-matches" },
    STARTS_WITH: { description: "Asserts that a string starts with the given prefix.", example: "assertThat(message).startsWith(\"Hello\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-startsWith" },
    ENDS_WITH: { description: "Asserts that a string ends with the given suffix.", example: "assertThat(message).endsWith(\"World\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-endsWith" },
    IS_TRUE: { description: "Asserts that the actual boolean value is true.", example: "assertThat(isValid).isTrue();", link: "https://assertj.github.io/doc/#assertj-core-is-true" },
    IS_FALSE: { description: "Asserts that the actual boolean value is false.", example: "assertThat(isInvalid).isFalse();", link: "https://assertj.github.io/doc/#assertj-core-is-false" },
    IS_NULL: { description: "Asserts that the actual value is null.", example: "assertThat(myObject).isNull();", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-objects-isNull" },
    IS_EMPTY: { description: "Asserts that a string, collection, or array is empty.", example: "assertThat(myList).isEmpty(); assertThat(\"\").isEmpty();", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-iterables-isEmpty" },
    IS_NOT_EMPTY: { description: "Asserts that a string, collection, or array is not empty.", example: "assertThat(myList).isNotEmpty(); assertThat(\"abc\").isNotEmpty();", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-iterables-isNotEmpty" },
};