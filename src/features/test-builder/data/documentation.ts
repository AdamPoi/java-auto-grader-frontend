export const DOCUMENTATION: Record<string, { description: string; example?: string; link?: string }> = {
    FUNCTION: { description: "Creates a new test method. All tests in JUnit 5 must be annotated with @Test. You can assign a rubric item to this test for grading.", example: "@Test void myTest() { ... }", link: "https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" },
    ANALYZE_FUNCTION: { description: "Creates a block for static analysis checks on a function's structure using JavaParser. You can assign a rubric item to this analysis.", example: "analyze function myFunction: ..." },
    VARIABLE: { description: "Declares and initializes a variable for use within a test function.", example: "String name = \"AssertJ\";" },
    ASSERT_THAT: { description: "The entry point for all AssertJ assertions. You pass the object you want to test to this block.", example: "assertThat(myString)...", link: "https://assertj.github.io/doc/#assertj-core-quick-start" },
    EXCEPTION_ASSERT: { description: "Asserts that a specific piece of code throws an exception of a certain type.", example: "assertThatExceptionOfType(IOException.class).isThrownBy(() -> { ... });", link: "https://assertj.github.io/doc/#assertj-core-exception-assertions-assertThatExceptionOfType" },
    IS_EQUAL_TO: { description: "Asserts that the actual value is equal to the expected value using `.equals()`.", example: "assertThat(name).isEqualTo(\"AssertJ\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-objects-isEqualTo" },
    IS_NOT_NULL: { description: "Asserts that the actual value is not null.", example: "assertThat(myObject).isNotNull();" },
    HAS_LENGTH: { description: "Asserts that the length of a String is equal to the given value. (For collections, use `hasSize`).", example: "assertThat(\"four\").hasLength(4);" },
    IS_INSTANCE_OF: { description: "Asserts that the actual value is an instance of the given class.", example: "assertThat(myObject).isInstanceOf(String.class);", link: "https://assertj.github.io/doc/#assertj-core-is-instance-of" },
    CONTAINS: { description: "Asserts that an array or iterable contains the given value(s).", example: "assertThat(myList).contains(\"apple\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-iterables-contains" },
    DOES_NOT_CONTAIN: { description: "Asserts that an array or iterable does not contain the given value(s).", example: "assertThat(myList).doesNotContain(\"orange\");" },
    EXTRACTING: { description: "Extracts a property from an object, allowing you to chain assertions on that property.", example: "assertThat(person).extracting(\"name\").isEqualTo(\"John\");", link: "https://assertj.github.io/doc/#assertj-core-extracting" },
    MATCHES: { description: "Asserts that a string matches the given regular expression.", example: "assertThat(email).matches(\".+@.+\\..+\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-matches" },
    STARTS_WITH: { description: "Asserts that a string starts with the given prefix.", example: "assertThat(message).startsWith(\"Hello\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-startsWith" },
    ENDS_WITH: { description: "Asserts that a string ends with the given suffix.", example: "assertThat(message).endsWith(\"World\");", link: "https://assertj.github.io/doc/#assertj-core-assertions-for-strings-endsWith" },
    STATIC_ASSERT: { description: "Represents a static analysis check, verifying the source code itself, not its runtime behavior." },
    STRUCTURE_CHECK: { description: "Represents a check for a specific structural element within a function's source code." },
    STRUCTURE_CHECK_HAS_FOR_LOOP: { description: "Checks if the analyzed function contains at least one 'for' loop." },
    STRUCTURE_CHECK_HAS_VARIABLE: { description: "Checks if a variable with a specific type and name is declared within the function." },
    STRUCTURE_CHECK_HAS_PARAMETER: { description: "Checks if the analyzed function has a parameter with a specific type and name." },
    STRUCTURE_CHECK_RETURNS_TYPE: { description: "Checks if the analyzed function has a specific return type." },
    STRUCTURE_CHECK_CALLS_METHOD: { description: "Checks if the analyzed function contains a call to a specific method." },
    STRUCTURE_CHECK_USES_CONCATENATION: { description: "Checks if the analyzed function uses the '+' operator for string concatenation." },
};